# Task ID: 16
# Title: Implement Data Preprocessing Pipeline
# Status: pending
# Dependencies: 1, 3
# Priority: medium
# Description: Develop a reusable data preprocessing pipeline for handling images and videos.
# Details:
Create a pipeline for preprocessing image and video data that can be used across different services. Implement memory-efficient processing, batching support, and error handling with retry logic.

```python
import cv2
import numpy as np
from typing import Union, List, Tuple, Dict, Any
import io
from PIL import Image

class DataPreprocessor:
    def __init__(self, config):
        self.max_image_size = config.MAX_IMAGE_SIZE
        self.max_video_frames = config.MAX_VIDEO_FRAMES
        self.batch_size = config.BATCH_SIZE
    
    async def process_image(self, image_data: bytes, target_size: Tuple[int, int] = (224, 224)) -> np.ndarray:
        """Process image data into numpy array with proper formatting"""
        try:
            # Try using PIL first (more memory efficient)
            image = Image.open(io.BytesIO(image_data))
            image = image.convert('RGB')
            image = image.resize(target_size)
            return np.array(image)
        except Exception as e:
            # Fall back to OpenCV
            nparr = np.frombuffer(image_data, np.uint8)
            img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
            if img is None:
                raise ValueError(f"Failed to decode image: {str(e)}")
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            img = cv2.resize(img, target_size)
            return img
    
    async def process_video(self, video_data: bytes, sample_rate: int = 1) -> Tuple[List[np.ndarray], float]:
        """Process video data into a list of frames"""
        # Save to temporary file
        temp_path = "/tmp/temp_video.mp4"
        with open(temp_path, "wb") as f:
            f.write(video_data)
        
        # Open video
        cap = cv2.VideoCapture(temp_path)
        if not cap.isOpened():
            raise ValueError("Failed to open video file")
        
        fps = cap.get(cv2.CAP_PROP_FPS)
        frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
        
        # Limit number of frames to process
        max_frames = min(frame_count, self.max_video_frames)
        
        # Sample frames
        frames = []
        frame_idx = 0
        while len(frames) < max_frames and cap.isOpened():
            ret, frame = cap.read()
            if not ret:
                break
            
            if frame_idx % sample_rate == 0:
                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                frames.append(frame)
            
            frame_idx += 1
        
        cap.release()
        return frames, fps
    
    async def batch_process(self, items: List[Any], process_func, *args, **kwargs) -> List[Any]:
        """Process items in batches to manage memory usage"""
        results = []
        for i in range(0, len(items), self.batch_size):
            batch = items[i:i+self.batch_size]
            batch_results = [await process_func(item, *args, **kwargs) for item in batch]
            results.extend(batch_results)
        return results
    
    async def retry_operation(self, operation, max_retries: int = 3, *args, **kwargs):
        """Retry an operation with exponential backoff"""
        import asyncio
        import random
        
        retries = 0
        while retries < max_retries:
            try:
                return await operation(*args, **kwargs)
            except Exception as e:
                retries += 1
                if retries >= max_retries:
                    raise e
                
                # Exponential backoff with jitter
                delay = (2 ** retries) + random.uniform(0, 1)
                await asyncio.sleep(delay)
```

# Test Strategy:
Test image processing with various formats and sizes. Test video processing with different video types. Verify memory usage during batch processing. Test retry logic with simulated failures.
