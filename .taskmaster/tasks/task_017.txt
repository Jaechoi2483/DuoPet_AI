# Task ID: 17
# Title: Implement Error Handling and Input Validation
# Status: pending
# Dependencies: 1, 2
# Priority: high
# Description: Develop a comprehensive error handling and input validation system for all API endpoints.
# Details:
Create a system for validating input data and handling errors consistently across all endpoints. Implement detailed error messages, error codes, and proper HTTP status codes. Use Pydantic for input validation.

```python
from fastapi import FastAPI, Request, status
from fastapi.responses import JSONResponse
from fastapi.exceptions import RequestValidationError
from pydantic import BaseModel, validator
from typing import Any, Dict, Optional, List

# Custom exception classes
class APIError(Exception):
    def __init__(self, code: str, message: str, status_code: int = 400):
        self.code = code
        self.message = message
        self.status_code = status_code
        super().__init__(self.message)

class ResourceNotFoundError(APIError):
    def __init__(self, resource: str, resource_id: str):
        super().__init__(
            code="resource_not_found",
            message=f"{resource} with ID {resource_id} not found",
            status_code=404
        )

class ValidationError(APIError):
    def __init__(self, message: str, fields: Optional[Dict[str, List[str]]] = None):
        self.fields = fields or {}
        super().__init__(
            code="validation_error",
            message=message,
            status_code=422
        )

# Error response model
class ErrorResponse(BaseModel):
    success: bool = False
    error: Dict[str, Any]

# Setup error handlers
def setup_error_handlers(app: FastAPI):
    @app.exception_handler(APIError)
    async def api_error_handler(request: Request, exc: APIError):
        return JSONResponse(
            status_code=exc.status_code,
            content={
                "success": False,
                "error": {
                    "code": exc.code,
                    "message": exc.message,
                    "fields": getattr(exc, "fields", None)
                }
            }
        )
    
    @app.exception_handler(RequestValidationError)
    async def validation_error_handler(request: Request, exc: RequestValidationError):
        errors = {}
        for error in exc.errors():
            location = error["loc"][-1]
            if location not in errors:
                errors[location] = []
            errors[location].append(error["msg"])
        
        return JSONResponse(
            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
            content={
                "success": False,
                "error": {
                    "code": "validation_error",
                    "message": "Input validation error",
                    "fields": errors
                }
            }
        )
    
    @app.exception_handler(Exception)
    async def unhandled_exception_handler(request: Request, exc: Exception):
        return JSONResponse(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            content={
                "success": False,
                "error": {
                    "code": "internal_server_error",
                    "message": "An unexpected error occurred"
                }
            }
        )

# Input validation examples
class ImageUploadValidator(BaseModel):
    file_size: int
    content_type: str
    
    @validator('file_size')
    def validate_file_size(cls, v):
        max_size = 10 * 1024 * 1024  # 10MB
        if v > max_size:
            raise ValueError(f"File size exceeds maximum allowed size of {max_size} bytes")
        return v
    
    @validator('content_type')
    def validate_content_type(cls, v):
        allowed_types = ["image/jpeg", "image/png", "image/jpg"]
        if v not in allowed_types:
            raise ValueError(f"Content type must be one of: {', '.join(allowed_types)}")
        return v
```

# Test Strategy:
Test error handling with various error scenarios. Verify validation works correctly for different input types. Test error responses have the correct format and status codes. Verify custom exceptions work as expected.
